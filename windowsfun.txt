1)Find the top 3 highest-paid employees in each department, including employees tied at the
same salary level.
select EmployeeID,Name,Salary,Department,rn from
(
select EmployeeID,NAME,SALARY,DEPARTMENT,Rank()over(partition by Department order by salary desc) as rn from 
Employeed
)tt
where rn <=3

2)Write a query to find the employee(s) with the second-highest salary, but without using
RANK() or DENSE_RANK(). Return the EmployeeID, Name, and Salary.
select EmployeeID,Name,salary as max_salary from Employeed
where salary = (select max(salary) from Employeed WHERE SALARY < (SELECT MAX(salary) from Employeed))

3)For each customer, calculate a rolling sum of their transaction amounts for the last 3
transactions. Use the SUM() function with a window frame to calculate this rolling sum.
Return the TransactionID, CustomerID, Amount, and RollingSum for each transaction.

;with Transactions as
(
select transactionID,CustomerId,Amount,Sum(Amount)over(partition by CustomerID order by TransactionDate rows between 2 preceding and current row) as RollingSum from
Transactions1
)

select transactionID,CustomerId,Amount,RollingSum
from Transactions

4)Find the customers who have the highest and lowest first transaction amounts. Use the
FIRST_VALUE() function to find each customerâ€™s first transaction based on SaleDate, then
find the maximum and minimum of these first transactions. Return the CustomerID and
their first transaction amount.

;with  ctetransaction as
(
select customerId,TRANSACTIONDATE,Amount,FIRST_VALUE(Amount)over(partition by customerId order by TransactionDate)as first_transaction
from transactions1
)

select customerId,first_transaction from ctetransaction
where first_transaction = (select max(first_transaction) from ctetransaction)
union all
select customerId,first_transaction from ctetransaction
where first_transaction = (select min(first_transaction) from ctetransaction)

5)Write a query to assign alternating ranks to products within each category.
The highest price should be ranked first, followed by the lowest price, and this pattern
should continue alternately.
Use ROW_NUMBER() to create alternating ranks. Return the ProductID, Category, Price, and
AlternatingRank.

select ProductID,Category,Price,ROW_NUMBER()over(partition by  Category order by price desc) as rn
from Product

6. Employees Whose Salary is Higher than the Next Employee

;with leadsalary as
(
select EmployeeID,Name,Salary,lead(salary,1)over(order by EmployeeId) as lead from Employee
)

select EmployeeID,Name,Salary from leadsalary
where Salary>lead

7For each product, calculate the year-to-date (YTD) sales by summing up the sales from the
beginning of the year until the current SaleDate. Use the SUM() window function with a
frame to calculate the cumulative sum. Return the ProductID, SaleDate, Amount, and
YearToDateSales.

select  productID,SaleDate,Amount,SUM(Amount)over(partition by ProductID order by saledate rows between unbounded preceding and current row)
from Sales
where year(SaleDate) = year(getdate())

8)Write a query to rank employees within each department based on their hire date (oldest
first) and, in case of ties, based on their salary (highest first). Use RANK() and PARTITION
BY department to calculate this rank. Return EmployeeID, Name, HireDate, Salary,
Department, and Rank.

	select EmployeeID,Name,HireDate,salary,Department,Rank()over(partition by Department order by hiredate,salary desc)rn
	from Employee
	
9) Identifying Employees Who Earn More Than Their Department's
Average Salary


SELECT EmployeeID,NAME,SALARY,Department,AVG_SALARY
FROM
(
select EmployeeID,NAME,SALARY,Department,AVG(SALARY)OVER(PARTITION BY DEPARTMENT ) AS AVG_SALARY
from Employee
)TT
WHERE SALARY>AVG_SALARY


10) Finding the Difference Between the Current and Previous Transaction
for Each Customer


select TRANSACTIONID,CustomerId,Amount,amount-previous_Amount
from
(
SELECT TRANSACTIONID,CustomerId,Amount,
lag(Amount,1)over(partition by customerId order by Transactiondate) as  previous_Amount
from Transaction
)tt
